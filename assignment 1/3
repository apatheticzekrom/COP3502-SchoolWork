/* COP 3502C Assignment 1
This program is written by: Abdel Nabut */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include "leak_detector_c.h"

#define MONSTER_NAME_LENGTH 51
#define REGION_NAME_LENGTH 51
#define TRAINER_NAME_LENGTH 51
#define ELEMENT_LENGTH 51
#define MAX_POPULATION 1000000

typedef struct monster {
       char *name;
       char *element;
       int population;
} monster;
typedef struct region {
       char *name;
       int nmonsters;
       int total_population;
       monster **monsters;
} region;
typedef struct itinerary {
       int nregions;
       region **regions;
       int captures;
} itinerary;
typedef struct trainer {
       char *name;
       itinerary *visits;
} trainer;

monster* createMonster(char *name, char *element, int population)
{
    monster* mon = (monster*) malloc(sizeof(monster));
    mon->name = (char*) malloc(strlen(name) * sizeof(char));
    strcpy(mon->name, name);
    mon->element = (char*) malloc(strlen(element) * sizeof(char));
    strcpy(mon->element, element);
    mon->population = population;
    return mon;
}

monster** readMonsters(FILE* input_file, int *monsterCount)
{
    //what am I doing here? reading only the general list of monsters with their associated data? reading only the monsters found in each region? both?
    char monsters_string[10];
    
    char monster_name[MONSTER_NAME_LENGTH];
    char monster_element[ELEMENT_LENGTH];
    int population;
    
    
    fscanf(input_file, "%d %s", monsterCount, monsters_string);
    //printf("\n\n %d %s \n", *monsterCount, monsters_string);
    
    monster** monsters = (monster**) malloc(*monsterCount * (sizeof(monster*)));
    for(int i = 0; i < *monsterCount; i++)
    {
        fscanf(input_file, "%s %s %d", monster_name, monster_element, &population);
        monsters[i] = (monster*) malloc(sizeof(monster));
        monsters[i] = createMonster(monster_name, monster_element, population);
        //printf("\n%s %s %d\n", monsters[i]->name, monsters[i]->element, monsters[i]->population);
    }
    return monsters;
}

region** readRegions(FILE* infile, int *countRegions, monster** monsterList, int monsterCount)
{
    char regions_string[30];
    char monsters_string[MONSTER_NAME_LENGTH];
    char region_name[REGION_NAME_LENGTH];
    char monster_name[MONSTER_NAME_LENGTH];
    fscanf(infile, "%d %s", countRegions, regions_string);
    //printf("\n%d %s\n\n", *countRegions, regions_string);
    region** regions = (region**) malloc(*countRegions * sizeof(region*));
    for(int i = 0; i < *countRegions; i++)
    {


        int total_population = 0;
        regions[i] = (region*) malloc(sizeof(region));
        regions[i]->name = (char*) malloc(REGION_NAME_LENGTH * sizeof(char));
        fscanf(infile, "%s", region_name);
        strcpy(regions[i]->name, region_name);
        regions[i]->monsters = monsterList;
        //printf("\nRegion Name: %s \n", regions[i]->name);
        fscanf(infile, "%d", &regions[i]->nmonsters);
        fscanf(infile, "%s", monsters_string);
        //printf("Regional Monsters: %d\n", regions[i]->nmonsters);


        regions[i]->monsters = (monster**) malloc(regions[i]->nmonsters * sizeof(monster*));
        for(int x=0; x<regions[i]->nmonsters; x++)
        {
            regions[i]->monsters[x] = (monster*)malloc(sizeof(monster));
            regions[i]->monsters[x]->name = (char*) malloc(MONSTER_NAME_LENGTH * sizeof(char));

            fscanf(infile, "%s", regions[i]->monsters[x]->name);
            
            //strcpy(, monster_name);
            //printf("Monster Name: %s\n", regions[i]->monsters[x]->name);
            for(int y=0; y<monsterCount; y++)
            {
                if(strcmp(monsterList[y]->name, regions[i]->monsters[x]->name) == 0)
                {
                    regions[i]->monsters[x]->population = monsterList[y]->population;
                    regions[i]->monsters[x]->element = monsterList[y]->element;
                    total_population += monsterList[y]->population;
                    break;
                }
            }
            /*for(int y = 0; y<monsterCount; y++)
            {
                if(regions[i]->)
            }*/
        }
        regions[i]->total_population = total_population;
        //printf("Total Region Population: %d\n", regions[i]->total_population);
    }
    return regions;
    
}

trainer* readTrainers(FILE* infile, int *trainerCount, region** regionList, int
countRegions)
//what is the region list for?
{
    char regionName[REGION_NAME_LENGTH];
    char ignored_string[30]; // is there another way to ignore a string with fscanf without saving it to a temporary variable?
    int number_of_captures;
    int number_of_regions;
    char region_name[REGION_NAME_LENGTH];
    char name[TRAINER_NAME_LENGTH];
    fscanf(infile, "%d", trainerCount);
    fscanf(infile, "%s", ignored_string);
    trainer* trainers = (trainer*) malloc(*trainerCount * sizeof(trainer));
    
    for(int i = 0; i<*trainerCount; i++)

    {
      //compute the length
        fscanf(infile, "%s", name);
        int trainerNameLength = strlen(name);
        trainers[i].name = malloc(trainerNameLength * sizeof(char));
        strcpy(trainers[i].name,name);
        fscanf(infile, "%d", &number_of_captures);
        fscanf(infile, "%s", ignored_string);
        fscanf(infile, "%d", &number_of_regions);
        fscanf(infile, "%s", ignored_string);

        trainers[i].visits = (itinerary*) malloc(sizeof(itinerary));
        trainers[i].visits->captures = number_of_captures;
        trainers[i].visits->nregions = number_of_regions;
        trainers[i].visits->regions = (region**) malloc(number_of_regions * sizeof(region*));
        
        for(int x = 0; x < number_of_regions; x++)
        {   
            fscanf(infile, "%s", regionName);

            for(int y = 0; y < countRegions; y++)
            {
                if(strcmp(regionList[y]->name, regionName) == 0) {
                    trainers[i].visits->regions[x] = regionList[y];
                    
                    break;
                }
            }
            //printf("\n");
            
        }
        //printf("\n\n");
    }
    return trainers;
}


void process_inputs(monster** monsterList, int monsterCount, region** regionList,
    int regionCount, trainer* trainerList, int trainerCount )
    {
        FILE* output_file = fopen("out.txt", "w");
        for(int i = 0; i<trainerCount; i++)
        {
            printf("%s\n", trainerList[i].name);
            fprintf(output_file, "%s\n", trainerList[i].name);
            for(int x = 0; x<trainerList[i].visits->nregions; x++)
            {
                printf("%s\n", trainerList[i].visits->regions[x]->name);
                fprintf(output_file, "%s\n", trainerList[i].visits->regions[x]->name);
                for(int y = 0; y<trainerList[i].visits->regions[x]->nmonsters; y++)
                {
                    float num_of_captures = (float) trainerList[i].visits->regions[x]->monsters[y]->population / trainerList[i].visits->regions[x]->total_population;

                    num_of_captures*=trainerList[i].visits->captures;
                    
                    num_of_captures = round(num_of_captures);
                    int num_of_captures_integer = num_of_captures;
                    if(num_of_captures_integer>0)
                    {
                    printf("%d %s\n", num_of_captures_integer, trainerList[i].visits->regions[x]->monsters[y]->name);
                    fprintf(output_file, "%d %s\n", num_of_captures_integer, trainerList[i].visits->regions[x]->monsters[y]->name);
                    }
                }
                //for()
                //printf("%d captures\n", trainerList[i].visits->captures);
            }
            printf("\n");
            fprintf(output_file, "\n");
        }
        fclose(output_file);
        
    }

void release_memory(monster** monsterList, int monsterCount, region** regionList, int regionCount, trainer* trainerList, int trainerCount)
{
    for(int i = 0; i<trainerCount; i++)
        free(trainerList[i].visits);
    free(trainerList);
    for(int i = 0; i<regionCount; i++)
        free(regionList[i]->monsters);
    free(regionList);
    for(int i = 0; i<monsterCount; i++)
        printf("%s\n", monsterList[i]->name);
        free(monsterList[i]->name);
        //free(monsterList[i]->element);
        //free(monsterList[i]->population);
    free(monsterList);
    
}

int main() 
{
    atexit(report_mem_leak);
    FILE* input_file;
    FILE * output_file;
    
    int* number_of_monsters = (int*) malloc(sizeof(int));
    int* number_of_regions = (int*) malloc(sizeof(int));
    int* number_of_trainers = (int*) malloc(sizeof(int));
    *number_of_monsters = 8;
    
    input_file = fopen("in.txt", "r");
    output_file = fopen("out.txt", "w");
    fprintf(output_file, "test");
    if(input_file == NULL) {
        printf("Could not open input file\n");
        return 0;
    }
    output_file = fopen("output.txt", "w");
    if(output_file == NULL) {
        printf("Could not open output file\n");
        return 0;
    }
    monster** monsters = readMonsters(input_file, number_of_monsters);
    region** regions = readRegions(input_file, number_of_regions, monsters, *number_of_monsters);
    trainer* trainers = readTrainers(input_file, number_of_trainers, regions, *number_of_regions);
    process_inputs(monsters, *number_of_monsters, regions, *number_of_regions, trainers, *number_of_trainers);
    release_memory(monsters, *number_of_monsters, regions, *number_of_regions, trainers, *number_of_trainers);
    free(number_of_monsters);
    free(number_of_regions);
    free(number_of_trainers);
    fclose(input_file);
    fclose(output_file);
    
    //monster* jack = createMonster("jack", "water", 1000);
    //printf("%s %s %d", jack->name, jack->element, jack->population);
    

    
    return 0;
}